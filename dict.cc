//Function that creates a map of function words from a string
//Uses C++ default map class
//
#include <iostream>
#include <map>
#include <string>
#include <array>

using namespace std;
map<const string, int> createDict (std::string text){
	std::array<std::string,277> functionWords = {"a", "about",
"above",
"across",
"after",
"afterwards",
"again",
"against",
"all",
"almost",
"alone",
"along",
"already",
"also",
"although",
"always",
"am",
"among",
"amongst",
"amoungst",
"an",
"and",
"another",
"any",
"anyhow",
"anyone",
"anything",
"anyway",
"anywhere",
"are",
"around",
"as",
"at",
"be",
"became",
"because",
"been",
"before",
"beforehand",
"behind",
"being",
"below",
"beside",
"besides",
"between",
"beyond",
"both",
"but",
"by",
"can",
"cannot",
"could",
"dare",
"despite",
"did",
"do",
"does",
"done",
"down",
"during",
"each",
"eg",
"either",
"else",
"elsewhere",
"enough",
"etc",
"even",
"ever",
"every",
"everyone",
"everything",
"everywhere",
"except",
"few",
"first",
"for",
"former",
"formerly",
"from",
"further",
"furthermore",
"had",
"has",
"have",
"he",
"hence",
"her",
"here",
"hereabouts",
"hereafter",
"hereby",
"herein",
"hereinafter",
"heretofore",
"hereunder",
"hereupon",
"herewith",
"hers",
"herself",
"him",
"himself",
"his",
"how",
"however",
"i",
"ie",
"if",
"in",
"indeed",
"inside",
"instead",
"into",
"is",
"it",
"its",
"itself",
"last",
"latter",
"latterly",
"least",
"less",
"lot",
"lots",
"many",
"may",
"me",
"meanwhile",
"might",
"mine",
"more",
"moreover",
"most",
"mostly",
"much",
"must",
"my",
"myself",
"namely",
"near",
"need",
"neither",
"never",
"nevertheless",
"next",
"no",
"nobody",
"none",
"noone",
"nor",
"not",
"nothing",
"now",
"nowhere",
"of",
"off",
"often",
"oftentimes",
"on",
"once",
"one",
"only",
"onto",
"or",
"other",
"others",
"otherwise",
"ought",
"our",
"ours",
"ourselves",
"out",
"outside",
"over",
"per",
"perhaps",
"rather",
"re",
"same",
"second",
"several",
"shall",
"she",
"should",
"since",
"so",
"some",
"somehow",
"someone",
"something",
"sometime",
"sometimes",
"somewhat",
"somewhere",
"still",
"such",
"than",
"that",
"the",
"their",
"theirs",
"them",
"themselves",
"then",
"thence",
"there",
"thereabouts",
"thereafter",
"thereby",
"therefore",
"therein",
"thereof",
"thereon",
"thereupon",
"these",
"they",
"third",
"this",
"those",
"though",
"through",
"throughout",
"thru",
"thus",
"to",
"together",
"too",
"top",
"toward",
"towards",
"under",
"until",
"up",
"upon",
"us",
"used",
"very",
"via",
"was",
"we",
"well",
"were",
"what",
"whatever",
"when",
"whence",
"whenever",
"where",
"whereafter",
"whereas",
"whereby",
"wherein",
"whereupon",
"wherever",
"whether",
"which",
"while",
"whither",
"who",
"whoever",
"whole",
"whom",
"whose",
"why",
"whyever",
"will",
"with",
"within",
"without",
"would",
"yes",
"yet",
"you",
"your",
"yours",
"yourself",
"yourselves"	}; 
// function words taken from https://semanticsimilarity.wordpress.com/function-word-lists/
// I trust this site, guy says he has a PhD	
map<const string, int> output;
for (int i = 0; i < functionWords.size(); i++){
	output[functionWords[i]] = 0;
// This looks like it works

}
// All that needs to be done is to loop through the string and add one when a function words appears


// proper initialization necessary
return output;
}

int main(){
	map<const string, int> thisMap = createDict("is");
	printf("%i", thisMap["yes"]);
	return 0;
}


